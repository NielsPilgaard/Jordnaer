@page "/Account/Register"
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IDbContextFactory<JordnaerDbContext> DbContextFactory

@attribute [Sitemap]

<MetadataComponent Title="Opret en ny konto" />

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="3" Class="pa-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register" Enhance>
            <DataAnnotationsValidator />
            <h2 class="font-open-sans-medium" style="@($"color: {JordnaerPalette.RedHeader}")">Opret en ny konto</h2>
            <hr />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email"
                           class="form-control"
                           autocomplete="email"
                           aria-required="true"
                           placeholder="navn@eksempel.com"
                           id="email" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password"
                           @bind-Value="Input.Password"
                           class="form-control"
                           autocomplete="new-password"
                           aria-required="true"
                           placeholder="Adgangskode"
                           id="password" />
                <label for="password">Adgangskode</label>

                @if (_showPasswordValidation)
                {
	                <MudStack Spacing="2" Class="mt-2">
		                <MudText Typo="Typo.body2" Color="@(PasswordLengthValid ? Color.Success : Color.Error)">
			                <MudIcon Icon="@(PasswordLengthValid ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel)" Size="Size.Small" Class="mr-2" />
			                Mindst 8 tegn langt
		                </MudText>
		                <MudText Typo="Typo.body2" Color="@(PasswordUppercaseValid ? Color.Success : Color.Error)">
			                <MudIcon Icon="@(PasswordUppercaseValid ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel)" Size="Size.Small" Class="mr-2" />
			                Mindst ét stort bogstav
		                </MudText>
		                <MudText Typo="Typo.body2" Color="@(PasswordLowercaseValid ? Color.Success : Color.Error)">
			                <MudIcon Icon="@(PasswordLowercaseValid ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel)" Size="Size.Small" Class="mr-2" />
			                Mindst ét lille bogstav
		                </MudText>
		                <MudText Typo="Typo.body2" Color="@(PasswordNumberValid ? Color.Success : Color.Error)">
			                <MudIcon Icon="@(PasswordNumberValid ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel)" Size="Size.Small" Class="mr-2" />
			                Mindst ét tal
		                </MudText>
	                </MudStack>
                }
            </div>

            <div class="form-floating mb-3">
                <InputText type="password"
                           class="form-control"
                           @bind-Value="Input.ConfirmPassword"
                           autocomplete="new-password"
                           aria-required="true"
                           placeholder="Gentag adgangskode"
                           id="confirm-password" />
                <label for="confirm-password">Bekræft adgangskode</label>
                @if (_showConfirmPasswordValidation && IsPasswordValid)
                {
	                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                }
            </div>

            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       FullWidth>Opret
	            </MudButton>

            <div class="d-flex justify-center">
                <MudButton Href="/Account/Login" Class="mt-4" ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Info">
                    Log ind med eksisterende konto
                </MudButton>
            </div>
        </EditForm>
    </MudPaper>
    <MudPaper Elevation="3" Class="pa-4 mt-4">
        <ExternalLoginPicker />
    </MudPaper>
</MudContainer>

@code {
    private IEnumerable<IdentityError>? _identityErrors;
    
    private bool _showPasswordValidation = false;
    private bool _showConfirmPasswordValidation = false;

    private bool PasswordLengthValid => Input.Password.Length >= 8;
    private bool PasswordUppercaseValid => Input.Password.Any(char.IsUpper);
    private bool PasswordLowercaseValid => Input.Password.Any(char.IsLower);
    private bool PasswordNumberValid => Input.Password.Any(char.IsDigit);

    private bool IsPasswordValid => PasswordLengthValid && 
                                    PasswordUppercaseValid && 
                                    PasswordLowercaseValid && 
                                    PasswordNumberValid;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    
    protected override void OnParametersSet()
    {
	    _showPasswordValidation = !string.IsNullOrEmpty(Input.Password);
	    _showConfirmPasswordValidation = !string.IsNullOrEmpty(Input.ConfirmPassword);
    }

    private AlertMessage? Message => _identityErrors is null
        ? null
        : new AlertMessage(_identityErrors.Select(error => error.Description), true);

    public async Task RegisterUser(EditContext editContext)
    {
        var user = new ApplicationUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = (IUserEmailStore<ApplicationUser>)UserStore;
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            _identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);

        var userProfile = new UserProfile { Id = user.Id };
        await using var context = await DbContextFactory.CreateDbContextAsync();
        context.UserProfiles.Add(userProfile);
        await context.SaveChangesAsync();

        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                queryParameters: new Dictionary<string, object?> { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Påkrævet.", AllowEmptyStrings = false)]
        [EmailAddress(ErrorMessage = "Email skal være gyldig.")]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Påkrævet.", AllowEmptyStrings = false)]
        [DataType(DataType.Password)]
        [Display(Name = "Adgangskode")]
        [RegularExpression("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$",
            ErrorMessage = "Adgangskoden skal indeholde mindst 1 stort bogstav, 1 småt bogstav, 1 tal, samt være mindst 8 karakterer langt.")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Gentag adgangskode")]
        [Compare("Password", ErrorMessage = "Adgangskoderne matcher ikke.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
