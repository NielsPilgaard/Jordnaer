@using System.Security.Claims

@inject IDeleteUserService DeleteUserService
@inject ISnackbar Snackbar

<div class="d-flex justify-center align-center">
    <MudButton StartIcon="@Icons.Material.Filled.Warning"
               Size="Size.Large"
               Variant="Variant.Outlined"
               Color="Color.Error"
               OnClick="OpenDialog">
        Slet Bruger
    </MudButton>
</div>

<MudDialog @bind-Visible="_dialogIsOpen">
    <DialogContent>
        <MudText Typo="Typo.h5">Sletning af bruger</MudText>
        <MudText Typo="Typo.body1" Class="mt-3">
            Når du trykker på "Slet Bruger", vil du modtage en e-mail med et link til at bekræfte sletningen.
            Tjek uønsket post hvis du ikke modtager e-mailen indenfor et par minutter.
        </MudText>
        <MudText Typo="Typo.body1" Class="mt-3">
            Dette vil permanent slette din bruger og alle tilknyttede data.
            Denne handling kan ikke fortrydes.
        </MudText>
        <MudText Typo="Typo.body1" Class="mt-3">
            Indtast din e-mail <code>@_userEmail</code> for at fortsætte
        </MudText>
        <MudTextField Immediate
                       Label="Email"
                       @bind-Value="@_inputEmail"
                       Class="mt-3" />
     </DialogContent>
     <DialogActions>
         <MudButton Color="Color.Default" OnClick="CloseDialog" Variant="Variant.Filled">
             Annuller
         </MudButton>
         <MudButton ButtonType="ButtonType.Submit" Color="Color.Error" Disabled="@(!EmailConfirmed)" OnClick="DeleteAccount" Variant="Variant.Filled">
             Slet Bruger
         </MudButton>
     </DialogActions>
 </MudDialog>

 @code {
    [CascadingParameter]
    public required Task<AuthenticationState> AuthenticationState { get; set; }

    private bool _dialogIsOpen = false;
    private string? _inputEmail;
    private string _userEmail = null!;
    private string _currentUserId = null!;
    private bool EmailConfirmed => _inputEmail == _userEmail;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        _userEmail = authState.User.FindFirstValue(ClaimTypes.Email)!;
        _currentUserId = authState.User.GetId()!;
    }

    private void OpenDialog() => _dialogIsOpen = true;
    private void CloseDialog() => _dialogIsOpen = false;

    private async Task DeleteAccount()
    {
        var result = await DeleteUserService.InitiateDeleteUserAsync(_currentUserId);
        if (result)
        {
            Snackbar.Add("Du modtager snart en bekræftelses-mail.", Severity.Success);
        }
        else
        {
            Snackbar.Add(ErrorMessages.Something_Went_Wrong_Try_Again, Severity.Warning);
        }

        CloseDialog();
    }
}
