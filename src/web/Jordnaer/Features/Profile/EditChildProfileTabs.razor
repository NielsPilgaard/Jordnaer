@using Jordnaer.Shared
@using MassTransit
@using MudBlazor
@using OpenTelemetry.Trace
<MudDynamicTabs @bind-ActivePanelIndex="@_activePanelIndex"
                AddTab="@AddChildCallback"
                AddIconToolTip="Klik for at oprette et barn"
                PanelClass="px-4 py-6"
                Elevation="4"
                Rounded
                CloseTab="RemoveChild"
                CloseTabIcon="@Icons.Material.Filled.DeleteForever"
                CloseIconToolTip="Klik for at fjerne barnet"
                CloseIconStyle="color: var(--mud-palette-error)"
                AddIconStyle="color: var(--mud-palette-success)"
                KeepPanelsAlive
                ApplyEffectsToContainer>

    @foreach (var childProfile in Parent.ChildProfiles)
    {
        <MudTabPanel ID="@childProfile.Id" Text="@childProfile.FirstName">
            <EditChildProfile ChildProfile="childProfile" @ref="_editChildProfileComponentRef" />
        </MudTabPanel>
    }

</MudDynamicTabs>

@code
{
    private List<EditChildProfile> _editChildProfileComponents = [];

    public EditChildProfile _editChildProfileComponentRef
    {
	    get => _editChildProfileComponents[_activePanelIndex];
		set => _editChildProfileComponents.Add(value);
	}

	public async Task UpdateChildProfileDescriptions()
	{
        foreach (var editChildProfileComponent in _editChildProfileComponents)
		{
			await editChildProfileComponent.UpdateDescription();
		}
	}

    [Parameter]
    public required UserProfile Parent { get; set; }

    [Parameter]
    public EventCallback<UserProfile> ParentChanged { get; set; }

    private int _activePanelIndex = 0;

    public async Task AddChild(Guid id)
    {
        Parent.ChildProfiles.Add(new ChildProfile
        {
            Id = id,
            Gender = Gender.NotSet,
            FirstName = string.Empty,
            UserProfileId = Parent.Id
        });

        await ParentChanged.InvokeAsync(Parent);

        _activePanelIndex = Parent.ChildProfiles.Count - 1; // Automatically switch to the new tab.
    }

    private async Task AddChildCallback() => await AddChild(NewId.NextGuid());

    private void RemoveChild(MudTabPanel obj)
    {
	    var tab = Parent.ChildProfiles.Find(e => e.Id == (Guid?) obj.ID);
        if (tab is null) 		
        {
			return;
		}
        Parent.ChildProfiles.Remove(tab);

        var editChildProfileComponent = _editChildProfileComponents.Find(e => e.ChildProfile.Id == (Guid?) obj.ID);
        if (editChildProfileComponent is null)
        {
	        return;
        }
        _editChildProfileComponents.Remove(editChildProfileComponent);
    }
}
