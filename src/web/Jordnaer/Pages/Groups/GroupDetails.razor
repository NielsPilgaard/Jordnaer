@page "/groups/{GroupName}"

@attribute [Sitemap]

@inherits CancellableComponent

@inject GroupService GroupService
@inject IMembershipService MembershipService
@inject IJSRuntime JsRuntime
@inject IProfileCache ProfileCache
@inject ISnackbar Snackbar

<MudLoading @bind-Loading="_isLoading" Darken Overlap>

    @if (_group is null && _isLoading is false)
    {
        <NotFoundComponent Message="@_groupNotFoundMessage" />
        return;
    }

    <MetadataComponent Title="@_group?.Name"
                       Description="@($"Beskrivelse af {_group?.Name}:\n {_group?.ShortDescription}")"
                       Image="@_group?.ProfilePictureUrl" />

    <MudFab StartIcon="@Icons.Material.Filled.ArrowBack"
            Class="mb-5"
            Color="Color.Primary"
            OnClick="JsRuntime.GoBackAsync" />

    <AuthorizeView>
        <Authorized>
            <OpenChat Disabled="_isMember"
                      Recipients="_recipients"
                      ChatName="@($"{GroupName} & {_currentUser?.DisplayName}")" />

            <MudButton Disabled="_hasPendingMembershipRequest || _isMember"
                       Class="mb-5"
                       Color="Color.Tertiary"
                       OnClick="RequestMembership"
                       EndIcon="@Icons.Material.Filled.GroupAdd">
                Anmod om Medlemskab
            </MudButton>
            @if (_currentUserIsAdmin && _group is not null)
            {
                <MudButton Href="@($"/groups/{_group?.Id}/edit")"
                           Class="mb-5"
                           Color="Color.Warning"
                           Variant="Variant.Text"
                           EndIcon="@Icons.Material.Filled.Edit">
                    Redigér Gruppe
                </MudButton>
            }
        </Authorized>
    </AuthorizeView>

    <MudGrid>
        <MudItem xs="12" sm="6">
            @if (_group is null)
            {
                <MudLoading Loading="true" />
            }
            else
            {
                <GroupCard Group="_group" />
            }
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Elevation="3">
                <GroupMemberListComponent CurrentUserIsAdmin="_currentUserIsAdmin"
                                          GroupMembers="_groupMembers"
                                          GroupName="@GroupName" />
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            @if (!string.IsNullOrEmpty(_group?.Description))
            {
                <MudPaper Elevation="3" Class="pa-5">
                    @MarkdownRenderer.SanitizeAndRenderMarkupString(_group?.Description)
                </MudPaper>
            }
        </MudItem>
        @if (_isMember)
        {
            <MudItem xs="12">
                <MudPaper Elevation="3" Class="pa-5">
                    <MudAlert Severity="Severity.Info">Glæd dig - Her kommer du til at kunne oprette og læse indlæg i gruppen.</MudAlert>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudLoading>

@code {
    [Parameter]
    public required string GroupName { get; set; }

    private string _groupNotFoundMessage => $"Vi fandt ingen gruppe ved navn {GroupName}, beklager!";

    private GroupSlim? _group;

    private bool _isLoading = true;
    private UserProfile? _currentUser;
    private bool _hasPendingMembershipRequest = false;
    private bool _isMember = false;
    private bool _currentUserIsAdmin => _admins.Select(x => x.Id).Contains(_currentUser?.Id);
    private List<UserSlim> _recipients = [];
    private List<UserSlim>? _groupMembers;
    private List<UserSlim> _admins = [];

    protected override async Task OnInitializedAsync()
    {
        // TODO: Speed up with ContinueWith and Task.WhenAll
        var response = await GroupService.GetSlimGroupByNameAsync(GroupName);
        response.Switch(
            groupSlim => _group = groupSlim,
            _ => { });

        _isLoading = false;
        if (_group is null)
        {
            return;
        }

        _currentUser = await ProfileCache.GetProfileAsync();
        if (_currentUser is null)
        {
            _isLoading = false;
            return;
        }

        _groupMembers = await GroupService
            .GetGroupMembersByPredicateAsync(x => x.GroupId == _group.Id &&
                                                  x.MembershipStatus == MembershipStatus.Active);

        var currentUsersGroupMembership = await GroupService.GetCurrentUsersGroupMembershipAsync(_group.Id);

        _isMember = currentUsersGroupMembership?.MembershipStatus is MembershipStatus.Active;
        _hasPendingMembershipRequest = currentUsersGroupMembership?.MembershipStatus
            is MembershipStatus.PendingApprovalFromGroup
            or MembershipStatus.PendingApprovalFromUser;

        _admins = await GroupService
            .GetGroupMembersByPredicateAsync(x =>
                x.GroupId == _group.Id &&
                x.PermissionLevel == PermissionLevel.Admin);

        _recipients = _admins.Concat([_currentUser.ToUserSlim()]).ToList();
    }

    private async Task RequestMembership()
    {
        var requestMembershipResponse = await MembershipService.RequestMembership(GroupName, CancellationToken);
        requestMembershipResponse.Switch(
            _ =>
            {
                Snackbar.Add("Anmodning sendt!", Severity.Success);
                _hasPendingMembershipRequest = true;
                StateHasChanged();
            },
            existingMembershipError => Snackbar.Add($"Nuværende medlems status: {existingMembershipError.Value}",
                Severity.Warning),
            error => Snackbar.Add(error.Value, Severity.Warning));
    }
}
