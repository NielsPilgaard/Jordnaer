@page "/groups/{GroupId:guid}/edit"

@attribute [Authorize]

@inject GroupService GroupService
@inject ICategoryCache CategoryCache
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime

<MetadataComponent Title="Redigér gruppe"
                   Image="@_group?.ProfilePictureUrl" />

<MudLoading @bind-Loading="_isLoading" Darken Overlap>
    @if (_group is null)
    {
        <MudFab StartIcon="@Icons.Material.Filled.ArrowBack" Class="mb-5" Color="Color.Primary" OnClick="JsRuntime.GoBackAsync" />
        return;
    }

    <MudFab StartIcon="@Icons.Material.Filled.ArrowBack" Class="mb-5" Color="Color.Primary" OnClick="JsRuntime.GoBackAsync" />

    <EditForm Model="@_group" OnValidSubmit="Update">
        <DataAnnotationsValidator />
        <MudPaper Elevation="3" Class="pa-4">

            <GroupProfilePicture @bind-Group="_group" />

            <MudGrid>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="_group.Name"
                                  For="() => _group.Name"
                                  Label="Gruppenavn"
                                  Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" sm="8">
                    <MudTextField @bind-Value="_group.ShortDescription"
                                  For="() => _group.ShortDescription"
                                  Label="Kort beskrivelse"
                                  Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="_group.Address"
                                  For="() => _group.Address"
                                  Label="Adresse"
                                  Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="_group.ZipCode"
                                  For="() => _group.ZipCode"
                                  Label="Postnummer"
                                  name="zipCode"
                                  Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="_group.City"
                                  For="() => _group.City"
                                  Label="By"
                                  name="city"
                                  Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12">
                    <MudSelectExtended ItemCollection="_categories.Select(e => e.Name).ToList()"
                                       T="string"
                                       Label="Kategorier"
                                       MultiSelection="true"
                                       SelectedValues="_group.Categories.Select(e => e.Name)"
                                       ValuePresenter="ValuePresenter.Chip"
                                       Variant="Variant.Filled"
                                       SelectedValuesChanged="SelectedCategoriesChanged">
                    </MudSelectExtended>
                </MudItem>
                <MudItem xs="12">
                    <TextEditorComponent Placeholder="Beskriv din gruppe her..."
                                         Label="Beskrivelse"
                                         Text="@_group.Description"
                                         @ref="_textEditorComponent" />
                </MudItem>
            </MudGrid>
        </MudPaper>
        <MudButton Size="Size.Large"
                   StartIcon="@Icons.Material.Filled.Save"
                   Class="my-6"
                   ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   FullWidth
                   Color="Color.Success">
            Opdatér
        </MudButton>
    </EditForm>
</MudLoading>

@code {
    [Parameter]
    public Guid GroupId { get; set; }

    private Group? _group;

    private IEnumerable<Category> _categories = Enumerable.Empty<Category>();
    private bool _isLoading = true;

    private TextEditorComponent _textEditorComponent = default!;

    protected override async Task OnInitializedAsync()
    {
        var getGroupResponse = await GroupService.GetGroupByIdAsync(GroupId);
        getGroupResponse.Switch(
            group => _group = group,
            _ => Snackbar.Add("Det lykkedes ikke at finde gruppen.", Severity.Warning));

        _isLoading = false;

        _categories = await CategoryCache.GetOrCreateCategoriesAsync();
    }

    private void SelectedCategoriesChanged(IEnumerable<string> categories)
    {
        _group!.Categories = _categories.Where(e => categories.Contains(e.Name)).ToList();
    }

    private async Task Update()
    {
        _isLoading = true;

        if (_group is null)
        {
            Snackbar.Add(ErrorMessages.Something_Went_Wrong_Try_Again, Severity.Error);
            _isLoading = false;
            return;
        }

        _group.Description = await _textEditorComponent.GetHtmlAsync();

        var updateResult = await GroupService.UpdateGroupAsync(_group);

        updateResult.Switch(
            success => Snackbar.Add("Gruppen blev opdateret.", Severity.Success),
            error => Snackbar.Add(error.Value, Severity.Error));

        _isLoading = false;
    }
}
