@page "/personal/groups"

@attribute [Authorize]

@inject GroupService GroupService

<MetadataComponent Title="Dine grupper"
                   Description="Oversigt over dine grupper, og dine afventende anmodninger"/>

<MudButton Href="/groups"
           Color="Color.Info"
           Variant="Variant.Filled"
           StartIcon="@Icons.Material.Filled.ArrowLeft"
           EndIcon="@Icons.Material.Filled.Search">
	SÃ¸g efter grupper
</MudButton>

<MudButton
	Href="/groups/create"
	Variant="Variant.Filled"
	Color="Color.Success"
	StartIcon="@Icons.Material.Filled.GroupAdd">
	Opret gruppe
</MudButton>

<MudLoading @bind-Loading="_isLoading" Darken Overlap>
	@if (_pendingAccess.Length > 0)
	{
		<MudText Typo="Typo.h5" Class="font-open-sans-bold mt-10">Afventer Svar</MudText>
		<MudDivider Class="mb-5" />
		<MudGrid Justify="Justify.FlexStart" Spacing="6">
			@foreach (var group in _pendingAccess)
			{
				<MudItem xs="12" sm="6" md="6" lg="4">
					<GroupSummaryCard UserGroupAccess="group"></GroupSummaryCard>
				</MudItem>
			}
		</MudGrid>
	}

	<MudText Typo="Typo.h5" Class="font-open-sans-bold mt-10">Mine Grupper</MudText>
	@if (_memberOf.Length > 0)
	{
        <MudDivider Class="mb-5" />
		<MudGrid Justify="Justify.FlexStart" Spacing="6">
			@foreach (var group in _memberOf)
			{
				<MudItem xs="12" sm="6" md="6" lg="4">
					<GroupSummaryCard UserGroupAccess="group"></GroupSummaryCard>
				</MudItem>
			}
		</MudGrid>
	}
	else
	{
		<MudAlert Severity="Severity.Info">Du er ikke medlem af nogle grupper endnu.</MudAlert>
	}

	@if (_pendingAccess.Length is 0)
	{
		<MudText Typo="Typo.h5" Class="font-open-sans-bold mt-5">Afventer Svar</MudText>
		<MudDivider Class="mb-5" />
		<MudAlert Severity="Severity.Info">Du har ingen afventende anmodninger.</MudAlert>
	}

</MudLoading>
@code {
	private bool _isLoading = true;

    private List<UserGroupAccess>? _groupSummaries;

    private UserGroupAccess[] _memberOf = Array.Empty<UserGroupAccess>();

    private UserGroupAccess[] _pendingAccess = Array.Empty<UserGroupAccess>();

    protected override async Task OnInitializedAsync()
    {
        _groupSummaries = await GroupService.GetSlimGroupsForUserAsync();
        
        _memberOf = _groupSummaries
            .Where(x => x.MembershipStatus is MembershipStatus.Active)
            .ToArray();

        _pendingAccess = _groupSummaries
            .Where(x => x.MembershipStatus is MembershipStatus.PendingApprovalFromGroup or MembershipStatus.PendingApprovalFromUser)
            .ToArray();
        
        _isLoading = false;
    }
}
